datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model Collection {
  id      Int    @id @default(autoincrement())
  name    String
  handler String

  products Product[]

  ProductCollection ProductCollection[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("collections")
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(200)
  description String        @db.Text()
  handler     String        @unique
  status      ProductStatus

  variants    ProductVariant[]
  tags        String[]
  medias      ProductMedia[]
  collections Collection[]

  MediasIn          Media[]
  ProductCollection ProductCollection[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([id, title, handler])
  @@map("products")
}

model ProductCollection {
  productId    Int @map("product_id")
  collectionId Int @map("collection_id")

  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@id(name: "id", [productId, collectionId])
  @@map("product_collections")
}

model ProductVariant {
  id             Int     @id @default(autoincrement())
  colorName      String  @map("color_name")
  price          Int
  colorHex       String? @map("color_hex")
  productId      Int     @map("product_id")
  featureMediaId Int?    @unique() @map("feature_media_id")

  product      Product?      @relation(fields: [productId], references: [id], onDelete: Cascade)
  featureMedia ProductMedia? @relation(fields: [featureMediaId], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([productId])
  @@map("product_variants")
}

model ProductMedia {
  id         Int     @id @default(autoincrement())
  productId  Int     @map("product_id")
  mediaId    Int     @unique @map("media_id")
  sortNumber Int     @map("sort_number")
  alt        String?

  product        Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductVariant ProductVariant?
  Media          Media?          @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([productId])
  @@map("product_medias")
}

model Media {
  id       Int       @id @default(autoincrement())
  filename String
  size     BigInt
  type     MediaType
  mimeType String    @map("mime_type")
  bucket   String
  key      String

  productMedia ProductMedia?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  Product   Product[]

  @@map("medias")
}

model User {
  id                Int     @id @default(autoincrement())
  firstName         String  @map("first_name")
  lastName          String? @map("last_name")
  email             String
  billingAddressId  Int     @map("billing_address_id")
  shippingAddressId Int     @map("shipping_address_id")

  shippingAddress Address @relation("shipping_address_id_fk", fields: [shippingAddressId], references: [id])
  billingAddress  Address @relation("billing_address_id", fields: [billingAddressId], references: [id])

  Credential Credential[]
  address    Address[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

model Address {
  id     Int @id @default(autoincrement())
  userId Int @unique @map("user_id")

  addressLine1 String @map("address_line_1")
  addressLine2 String @map("address_line_2")
  city         String
  province     String
  country      String

  user        User   @relation(fields: [userId], references: [id])
  shipping_fk User[] @relation("shipping_address_id_fk")
  billing_fk  User[] @relation("billing_address_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("addresses")
}

model Credential {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique @map("user_id")
  email     String
  password  String?
  verfiedAt DateTime? @map("verfied_at") @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@map("credentials")
}

enum AuthMethod {
  EMAIL_PASSWORD
}

enum MediaType {
  IMAGE
  VIDEO
  UNKNOWN
}

enum ProductStatus {
  DRAFT
  ACTIVE
}
