datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(200)
  description String        @db.Text()
  handler     String        @unique
  status      ProductStatus

  variants ProductVariant[]
  tags     String[]
  medias   ProductMedia[]

  MediasIn      Media[]
  orderLineItem OrderLineItem[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at")

  @@index([id, title, handler])
  @@map("products")
}

model ProductVariant {
  id              Int     @id @default(autoincrement())
  colorName       String  @map("color_name")
  price           Decimal @db.Money
  colorHex        String? @map("color_hex")
  productId       Int     @map("product_id")
  featureMediaLoc Int?    @map("feature_media_loc_no")

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at")

  @@index([productId])
  @@map("product_variants")
}

model ProductMedia {
  id         Int     @id @default(autoincrement())
  productId  Int     @map("product_id")
  mediaId    Int     @unique @map("media_id")
  sortNumber Int     @map("sort_number")
  alt        String?

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  Media   Media?   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at")

  @@index([productId])
  @@map("product_medias")
}

model Media {
  id       Int       @id @default(autoincrement())
  filename String
  size     BigInt
  type     MediaType
  mimeType String    @map("mime_type")
  bucket   String
  key      String

  productMedia ProductMedia?
  Product      Product[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at")

  @@map("medias")
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String   @map("first_name")
  lastName     String?  @map("last_name")
  email        String   @unique
  role         UserRole @default(CUSTOMER)
  preference   Json?    @db.JsonB
  passwordHash String   @map("password_hash")

  address Address[]
  order   Order[]

  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime?     @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt   DateTime?     @map("deleted_at")
  ChatSession ChatSession[]

  @@map("users")
}

model Address {
  id     Int @id @default(autoincrement())
  userId Int @unique @map("user_id")

  addressLine1 String  @map("address_line_1")
  addressLine2 String? @map("address_line_2")
  city         String
  province     String
  country      String
  zipCode      String? @map("zip_code")

  user  User?   @relation(fields: [userId], references: [id])
  order Order[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at")

  @@map("addresses")
}

model Order {
  id         Int     @id @default(autoincrement())
  userId     Int     @map("user_id")
  userEmail  String  @map("user_email")
  addressId  Int     @map("address_id")
  totalPrice Decimal @db.Money

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  lineItems OrderLineItem[]

  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  cancelledAt DateTime? @map("cancelled_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("orders")
}

model OrderLineItem {
  id        Int     @id @default(autoincrement())
  orderId   Int?    @map("order_id")
  productId Int?    @map("product_id")
  price     Decimal @db.Money
  quantity  Int

  order   Order?   @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at")

  @@map("order_line_items")
}

model ChatSession {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages ChatMessage[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("chat_sessions")
}

model ChatMessage {
  id            Int        @id @default(autoincrement())
  chatSessionId Int        @map("chat_session_id")
  source        ChatSource
  message       String

  chat ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
}

enum ChatSource {
  Assistant
  User
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
  UNKNOWN
}

enum ProductStatus {
  DRAFT
  ACTIVE
}

enum OrderStatus {
  DRAFT
  ACTIVE
  CANCELLED
}
