// Code generated by goa v3.20.0, DO NOT EDIT.
//
// ecommerce HTTP client CLI support package
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	svchealthcheckc "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/http/svc_healthcheck/client"
	svcproductsc "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/http/svc_products/client"
	svcvendorc "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/http/svc_vendor/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `svc-healthcheck check
svc-products (list-product|get-product-by-id|create-product|update-product-by-id|delete-product-by-id)
svc-vendor (list|create|delete-by-id)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` svc-healthcheck check` + "\n" +
		os.Args[0] + ` svc-products list-product --page-size 11 --after 1507823738322435300` + "\n" +
		os.Args[0] + ` svc-vendor list --page-size 61 --after 823592245598267839` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		svcHealthcheckFlags = flag.NewFlagSet("svc-healthcheck", flag.ContinueOnError)

		svcHealthcheckCheckFlags = flag.NewFlagSet("check", flag.ExitOnError)

		svcProductsFlags = flag.NewFlagSet("svc-products", flag.ContinueOnError)

		svcProductsListProductFlags        = flag.NewFlagSet("list-product", flag.ExitOnError)
		svcProductsListProductPageSizeFlag = svcProductsListProductFlags.String("page-size", "10", "")
		svcProductsListProductAfterFlag    = svcProductsListProductFlags.String("after", "", "")

		svcProductsGetProductByIDFlags         = flag.NewFlagSet("get-product-by-id", flag.ExitOnError)
		svcProductsGetProductByIDProductIDFlag = svcProductsGetProductByIDFlags.String("product-id", "REQUIRED", "Unique product identifier")

		svcProductsCreateProductFlags    = flag.NewFlagSet("create-product", flag.ExitOnError)
		svcProductsCreateProductBodyFlag = svcProductsCreateProductFlags.String("body", "REQUIRED", "")

		svcProductsUpdateProductByIDFlags         = flag.NewFlagSet("update-product-by-id", flag.ExitOnError)
		svcProductsUpdateProductByIDBodyFlag      = svcProductsUpdateProductByIDFlags.String("body", "REQUIRED", "")
		svcProductsUpdateProductByIDProductIDFlag = svcProductsUpdateProductByIDFlags.String("product-id", "REQUIRED", "Unique product identifier")

		svcProductsDeleteProductByIDFlags         = flag.NewFlagSet("delete-product-by-id", flag.ExitOnError)
		svcProductsDeleteProductByIDProductIDFlag = svcProductsDeleteProductByIDFlags.String("product-id", "REQUIRED", "Unique product identifier")

		svcVendorFlags = flag.NewFlagSet("svc-vendor", flag.ContinueOnError)

		svcVendorListFlags        = flag.NewFlagSet("list", flag.ExitOnError)
		svcVendorListPageSizeFlag = svcVendorListFlags.String("page-size", "10", "")
		svcVendorListAfterFlag    = svcVendorListFlags.String("after", "", "")

		svcVendorCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		svcVendorCreateBodyFlag = svcVendorCreateFlags.String("body", "REQUIRED", "")

		svcVendorDeleteByIDFlags        = flag.NewFlagSet("delete-by-id", flag.ExitOnError)
		svcVendorDeleteByIDVendorIDFlag = svcVendorDeleteByIDFlags.String("vendor-id", "REQUIRED", "Unique product identifier")
	)
	svcHealthcheckFlags.Usage = svcHealthcheckUsage
	svcHealthcheckCheckFlags.Usage = svcHealthcheckCheckUsage

	svcProductsFlags.Usage = svcProductsUsage
	svcProductsListProductFlags.Usage = svcProductsListProductUsage
	svcProductsGetProductByIDFlags.Usage = svcProductsGetProductByIDUsage
	svcProductsCreateProductFlags.Usage = svcProductsCreateProductUsage
	svcProductsUpdateProductByIDFlags.Usage = svcProductsUpdateProductByIDUsage
	svcProductsDeleteProductByIDFlags.Usage = svcProductsDeleteProductByIDUsage

	svcVendorFlags.Usage = svcVendorUsage
	svcVendorListFlags.Usage = svcVendorListUsage
	svcVendorCreateFlags.Usage = svcVendorCreateUsage
	svcVendorDeleteByIDFlags.Usage = svcVendorDeleteByIDUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "svc-healthcheck":
			svcf = svcHealthcheckFlags
		case "svc-products":
			svcf = svcProductsFlags
		case "svc-vendor":
			svcf = svcVendorFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "svc-healthcheck":
			switch epn {
			case "check":
				epf = svcHealthcheckCheckFlags

			}

		case "svc-products":
			switch epn {
			case "list-product":
				epf = svcProductsListProductFlags

			case "get-product-by-id":
				epf = svcProductsGetProductByIDFlags

			case "create-product":
				epf = svcProductsCreateProductFlags

			case "update-product-by-id":
				epf = svcProductsUpdateProductByIDFlags

			case "delete-product-by-id":
				epf = svcProductsDeleteProductByIDFlags

			}

		case "svc-vendor":
			switch epn {
			case "list":
				epf = svcVendorListFlags

			case "create":
				epf = svcVendorCreateFlags

			case "delete-by-id":
				epf = svcVendorDeleteByIDFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "svc-healthcheck":
			c := svchealthcheckc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "check":
				endpoint = c.Check()
			}
		case "svc-products":
			c := svcproductsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-product":
				endpoint = c.ListProduct()
				data, err = svcproductsc.BuildListProductPayload(*svcProductsListProductPageSizeFlag, *svcProductsListProductAfterFlag)
			case "get-product-by-id":
				endpoint = c.GetProductByID()
				data, err = svcproductsc.BuildGetProductByIDPayload(*svcProductsGetProductByIDProductIDFlag)
			case "create-product":
				endpoint = c.CreateProduct()
				data, err = svcproductsc.BuildCreateProductPayload(*svcProductsCreateProductBodyFlag)
			case "update-product-by-id":
				endpoint = c.UpdateProductByID()
				data, err = svcproductsc.BuildUpdateProductByIDPayload(*svcProductsUpdateProductByIDBodyFlag, *svcProductsUpdateProductByIDProductIDFlag)
			case "delete-product-by-id":
				endpoint = c.DeleteProductByID()
				data, err = svcproductsc.BuildDeleteProductByIDPayload(*svcProductsDeleteProductByIDProductIDFlag)
			}
		case "svc-vendor":
			c := svcvendorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = svcvendorc.BuildListPayload(*svcVendorListPageSizeFlag, *svcVendorListAfterFlag)
			case "create":
				endpoint = c.Create()
				data, err = svcvendorc.BuildCreatePayload(*svcVendorCreateBodyFlag)
			case "delete-by-id":
				endpoint = c.DeleteByID()
				data, err = svcvendorc.BuildDeleteByIDPayload(*svcVendorDeleteByIDVendorIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// svcHealthcheckUsage displays the usage of the svc-healthcheck command and
// its subcommands.
func svcHealthcheckUsage() {
	fmt.Fprintf(os.Stderr, `Service is the svc-healthcheck service interface.
Usage:
    %[1]s [globalflags] svc-healthcheck COMMAND [flags]

COMMAND:
    check: Check implements check.

Additional help:
    %[1]s svc-healthcheck COMMAND --help
`, os.Args[0])
}
func svcHealthcheckCheckUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-healthcheck check

Check implements check.

Example:
    %[1]s svc-healthcheck check
`, os.Args[0])
}

// svcProductsUsage displays the usage of the svc-products command and its
// subcommands.
func svcProductsUsage() {
	fmt.Fprintf(os.Stderr, `The product service perform CRUD operation over the product resource
Usage:
    %[1]s [globalflags] svc-products COMMAND [flags]

COMMAND:
    list-product: List products
    get-product-by-id: Get a product by its id
    create-product: Create a new product
    update-product-by-id: Create a new product
    delete-product-by-id: Create a new product

Additional help:
    %[1]s svc-products COMMAND --help
`, os.Args[0])
}
func svcProductsListProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-products list-product -page-size INT -after INT

List products
    -page-size INT: 
    -after INT: 

Example:
    %[1]s svc-products list-product --page-size 11 --after 1507823738322435300
`, os.Args[0])
}

func svcProductsGetProductByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-products get-product-by-id -product-id INT

Get a product by its id
    -product-id INT: Unique product identifier

Example:
    %[1]s svc-products get-product-by-id --product-id 7382141355489381514
`, os.Args[0])
}

func svcProductsCreateProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-products create-product -body JSON

Create a new product
    -body JSON: 

Example:
    %[1]s svc-products create-product --body '{
      "description": "Voluptatem ad sunt voluptatem doloribus tempora neque.",
      "handle": "Eveniet vitae aperiam velit quas rerum.",
      "medias": [
         {
            "alt": "Tenetur qui consequuntur.",
            "mediaId": "Soluta animi aliquam eaque et.",
            "sortNumber": 6570939598249231544
         },
         {
            "alt": "Tenetur qui consequuntur.",
            "mediaId": "Soluta animi aliquam eaque et.",
            "sortNumber": 6570939598249231544
         }
      ],
      "status": "ACTIVE",
      "tags": [
         "Et dolor esse.",
         "Voluptatem est iure.",
         "Unde sapiente.",
         "Inventore laboriosam neque."
      ],
      "title": "Necessitatibus consectetur enim numquam iste dolorem.",
      "variants": [
         {
            "colorHex": "Numquam ad.",
            "colorName": "Impedit sequi.",
            "price": 5605191480377568692
         },
         {
            "colorHex": "Numquam ad.",
            "colorName": "Impedit sequi.",
            "price": 5605191480377568692
         },
         {
            "colorHex": "Numquam ad.",
            "colorName": "Impedit sequi.",
            "price": 5605191480377568692
         },
         {
            "colorHex": "Numquam ad.",
            "colorName": "Impedit sequi.",
            "price": 5605191480377568692
         }
      ],
      "vendorId": "Omnis recusandae in aliquid accusamus occaecati et."
   }'
`, os.Args[0])
}

func svcProductsUpdateProductByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-products update-product-by-id -body JSON -product-id INT

Create a new product
    -body JSON: 
    -product-id INT: Unique product identifier

Example:
    %[1]s svc-products update-product-by-id --body '{
      "description": "Ut accusantium.",
      "handle": "Sit et beatae.",
      "medias": [
         {
            "alt": "Ut natus porro eaque eius sint.",
            "mediaId": "Dolorem dolorem molestias nam.",
            "sortNumber": 6693284239779247650
         },
         {
            "alt": "Ut natus porro eaque eius sint.",
            "mediaId": "Dolorem dolorem molestias nam.",
            "sortNumber": 6693284239779247650
         }
      ],
      "status": "ACTIVE",
      "tags": [
         "Sint sint.",
         "Illum officiis iste consequatur.",
         "Similique nulla."
      ],
      "title": "Molestias aut sit hic autem.",
      "variants": [
         {
            "colorHex": "Voluptates error.",
            "colorName": "Molestiae eligendi consequuntur in vero.",
            "price": 4481215871489952671
         },
         {
            "colorHex": "Voluptates error.",
            "colorName": "Molestiae eligendi consequuntur in vero.",
            "price": 4481215871489952671
         },
         {
            "colorHex": "Voluptates error.",
            "colorName": "Molestiae eligendi consequuntur in vero.",
            "price": 4481215871489952671
         }
      ],
      "vendorId": "Modi perferendis distinctio non nobis ut numquam."
   }' --product-id 3281393361508820864
`, os.Args[0])
}

func svcProductsDeleteProductByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-products delete-product-by-id -product-id INT

Create a new product
    -product-id INT: Unique product identifier

Example:
    %[1]s svc-products delete-product-by-id --product-id 8528879750237703595
`, os.Args[0])
}

// svcVendorUsage displays the usage of the svc-vendor command and its
// subcommands.
func svcVendorUsage() {
	fmt.Fprintf(os.Stderr, `The product service perform CRUD over the vendor resource
Usage:
    %[1]s [globalflags] svc-vendor COMMAND [flags]

COMMAND:
    list: List vendors
    create: Create a new product
    delete-by-id: Create a new product

Additional help:
    %[1]s svc-vendor COMMAND --help
`, os.Args[0])
}
func svcVendorListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-vendor list -page-size INT -after INT

List vendors
    -page-size INT: 
    -after INT: 

Example:
    %[1]s svc-vendor list --page-size 61 --after 823592245598267839
`, os.Args[0])
}

func svcVendorCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-vendor create -body JSON

Create a new product
    -body JSON: 

Example:
    %[1]s svc-vendor create --body '{
      "name": "Deleniti dicta qui."
   }'
`, os.Args[0])
}

func svcVendorDeleteByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-vendor delete-by-id -vendor-id INT

Create a new product
    -vendor-id INT: Unique product identifier

Example:
    %[1]s svc-vendor delete-by-id --vendor-id 6510212265065747319
`, os.Args[0])
}
