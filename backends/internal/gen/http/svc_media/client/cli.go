// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-media HTTP client CLI support package
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	svcmedia "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_media"
	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the svc-media list endpoint from CLI
// flags.
func BuildListPayload(svcMediaListPageSize string, svcMediaListAfter string, svcMediaListBucket string) (*svcmedia.ListPayload, error) {
	var err error
	var pageSize int
	{
		if svcMediaListPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(svcMediaListPageSize, 10, strconv.IntSize)
			pageSize = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
			if pageSize < 10 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", pageSize, 10, true))
			}
			if pageSize > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", pageSize, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var after int
	{
		if svcMediaListAfter != "" {
			var v int64
			v, err = strconv.ParseInt(svcMediaListAfter, 10, strconv.IntSize)
			after = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for after, must be INT")
			}
		}
	}
	var bucket string
	{
		if svcMediaListBucket != "" {
			bucket = svcMediaListBucket
		}
	}
	v := &svcmedia.ListPayload{}
	v.PageSize = pageSize
	v.After = after
	v.Bucket = bucket

	return v, nil
}

// BuildGetByIDPayload builds the payload for the svc-media getById endpoint
// from CLI flags.
func BuildGetByIDPayload(svcMediaGetByIDMediaID string) (*svcmedia.GetByIDPayload, error) {
	var err error
	var mediaID int
	{
		var v int64
		v, err = strconv.ParseInt(svcMediaGetByIDMediaID, 10, strconv.IntSize)
		mediaID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for mediaID, must be INT")
		}
	}
	v := &svcmedia.GetByIDPayload{}
	v.MediaID = &mediaID

	return v, nil
}

// BuildCreatePayload builds the payload for the svc-media create endpoint from
// CLI flags.
func BuildCreatePayload(svcMediaCreateBody string) (*svcmedia.MediaInput, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(svcMediaCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"bucket\": \"Quo sed rerum est harum ut.\",\n      \"filename\": \"Veniam molestiae impedit.\",\n      \"key\": \"Veritatis porro non eos inventore dolorem.\",\n      \"mimeType\": \"Accusantium quaerat harum.\",\n      \"size\": 166915493086386515\n   }'")
		}
	}
	v := &svcmedia.MediaInput{
		Filename: body.Filename,
		MimeType: body.MimeType,
		Size:     body.Size,
		Bucket:   body.Bucket,
		Key:      body.Key,
	}

	return v, nil
}

// BuildDeleteByIDPayload builds the payload for the svc-media deleteById
// endpoint from CLI flags.
func BuildDeleteByIDPayload(svcMediaDeleteByIDMediaID string) (*svcmedia.DeleteByIDPayload, error) {
	var err error
	var mediaID int
	{
		var v int64
		v, err = strconv.ParseInt(svcMediaDeleteByIDMediaID, 10, strconv.IntSize)
		mediaID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for mediaID, must be INT")
		}
	}
	v := &svcmedia.DeleteByIDPayload{}
	v.MediaID = &mediaID

	return v, nil
}
