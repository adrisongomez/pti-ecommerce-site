// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-media HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	svcmedia "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_media"
	svcmediaviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_media/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "svc-media" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListSvcMediaPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("svc-media", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the svc-media list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*svcmedia.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("svc-media", "list", "*svcmedia.ListPayload", v)
		}
		values := req.URL.Query()
		values.Add("pageSize", fmt.Sprintf("%v", p.PageSize))
		values.Add("after", fmt.Sprintf("%v", p.After))
		values.Add("bucket", p.Bucket)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the svc-media
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadGateway
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-media", "list", err)
			}
			p := NewListMediaListOK(&body)
			view := "default"
			vres := &svcmediaviews.MediaList{Projected: p, View: view}
			if err = svcmediaviews.ValidateMediaList(vres); err != nil {
				return nil, goahttp.ErrValidationError("svc-media", "list", err)
			}
			res := svcmedia.NewMediaList(vres)
			return res, nil
		case http.StatusBadGateway:
			var (
				body ListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-media", "list", err)
			}
			err = ValidateListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("svc-media", "list", err)
			}
			return nil, NewListBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("svc-media", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildGetByIDRequest instantiates a HTTP request object with method and path
// set to call the "svc-media" service "getById" endpoint
func (c *Client) BuildGetByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		mediaID int
	)
	{
		p, ok := v.(*svcmedia.GetByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("svc-media", "getById", "*svcmedia.GetByIDPayload", v)
		}
		if p.MediaID != nil {
			mediaID = *p.MediaID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetByIDSvcMediaPath(mediaID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("svc-media", "getById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetByIDResponse returns a decoder for responses returned by the
// svc-media getById endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetByIDResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeGetByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-media", "getById", err)
			}
			p := NewGetByIDMediaOK(&body)
			view := "default"
			vres := &svcmediaviews.Media{Projected: p, View: view}
			if err = svcmediaviews.ValidateMedia(vres); err != nil {
				return nil, goahttp.ErrValidationError("svc-media", "getById", err)
			}
			res := svcmedia.NewMedia(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetByIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-media", "getById", err)
			}
			err = ValidateGetByIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("svc-media", "getById", err)
			}
			return nil, NewGetByIDNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("svc-media", "getById", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "svc-media" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateSvcMediaPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("svc-media", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the svc-media
// create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*svcmedia.MediaInput)
		if !ok {
			return goahttp.ErrInvalidType("svc-media", "create", "*svcmedia.MediaInput", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("svc-media", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// svc-media create endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-media", "create", err)
			}
			p := NewCreateMediaCreated(&body)
			view := "default"
			vres := &svcmediaviews.Media{Projected: p, View: view}
			if err = svcmediaviews.ValidateMedia(vres); err != nil {
				return nil, goahttp.ErrValidationError("svc-media", "create", err)
			}
			res := svcmedia.NewMedia(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-media", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("svc-media", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("svc-media", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteByIDRequest instantiates a HTTP request object with method and
// path set to call the "svc-media" service "deleteById" endpoint
func (c *Client) BuildDeleteByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		mediaID int
	)
	{
		p, ok := v.(*svcmedia.DeleteByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("svc-media", "deleteById", "*svcmedia.DeleteByIDPayload", v)
		}
		if p.MediaID != nil {
			mediaID = *p.MediaID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteByIDSvcMediaPath(mediaID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("svc-media", "deleteById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteByIDResponse returns a decoder for responses returned by the
// svc-media deleteById endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteByIDResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeDeleteByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body bool
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-media", "deleteById", err)
			}
			return body, nil
		case http.StatusNotFound:
			var (
				body DeleteByIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-media", "deleteById", err)
			}
			err = ValidateDeleteByIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("svc-media", "deleteById", err)
			}
			return nil, NewDeleteByIDNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("svc-media", "deleteById", resp.StatusCode, string(body))
		}
	}
}

// unmarshalMediaResponseBodyToSvcmediaviewsMediaView builds a value of type
// *svcmediaviews.MediaView from a value of type *MediaResponseBody.
func unmarshalMediaResponseBodyToSvcmediaviewsMediaView(v *MediaResponseBody) *svcmediaviews.MediaView {
	if v == nil {
		return nil
	}
	res := &svcmediaviews.MediaView{
		ID:  v.ID,
		URL: v.URL,
	}
	mediaType := svcmediaviews.MediaTypeView(*v.MediaType)
	res.MediaType = &mediaType

	return res
}

// unmarshalPageInfoResponseBodyToSvcmediaviewsPageInfoView builds a value of
// type *svcmediaviews.PageInfoView from a value of type *PageInfoResponseBody.
func unmarshalPageInfoResponseBodyToSvcmediaviewsPageInfoView(v *PageInfoResponseBody) *svcmediaviews.PageInfoView {
	if v == nil {
		return nil
	}
	res := &svcmediaviews.PageInfoView{
		StartCursor:   v.StartCursor,
		EndCursor:     v.EndCursor,
		HasMore:       v.HasMore,
		TotalResource: v.TotalResource,
	}

	return res
}
