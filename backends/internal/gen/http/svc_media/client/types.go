// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-media HTTP client types
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package client

import (
	svcmedia "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_media"
	svcmediaviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_media/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "svc-media" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	Filename string `form:"filename" json:"filename" xml:"filename"`
	MimeType string `form:"mimeType" json:"mimeType" xml:"mimeType"`
	Size     int    `form:"size" json:"size" xml:"size"`
	Bucket   string `form:"bucket" json:"bucket" xml:"bucket"`
	Key      string `form:"key" json:"key" xml:"key"`
}

// ListResponseBody is the type of the "svc-media" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// Data
	Data MediaCollectionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Pagination information
	PageInfo *PageInfoResponseBody `form:"pageInfo,omitempty" json:"pageInfo,omitempty" xml:"pageInfo,omitempty"`
}

// GetByIDResponseBody is the type of the "svc-media" service "getById"
// endpoint HTTP response body.
type GetByIDResponseBody struct {
	// Key ID
	ID        *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	MediaType *string `form:"mediaType,omitempty" json:"mediaType,omitempty" xml:"mediaType,omitempty"`
	URL       *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// CreateResponseBody is the type of the "svc-media" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Key ID
	ID        *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	MediaType *string `form:"mediaType,omitempty" json:"mediaType,omitempty" xml:"mediaType,omitempty"`
	URL       *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// ListBadRequestResponseBody is the type of the "svc-media" service "list"
// endpoint HTTP response body for the "BadRequest" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetByIDNotFoundResponseBody is the type of the "svc-media" service "getById"
// endpoint HTTP response body for the "NotFound" error.
type GetByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "svc-media" service "create"
// endpoint HTTP response body for the "BadRequest" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteByIDNotFoundResponseBody is the type of the "svc-media" service
// "deleteById" endpoint HTTP response body for the "NotFound" error.
type DeleteByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MediaCollectionResponseBody is used to define fields on response body types.
type MediaCollectionResponseBody []*MediaResponseBody

// MediaResponseBody is used to define fields on response body types.
type MediaResponseBody struct {
	// Key ID
	ID        *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	MediaType *string `form:"mediaType,omitempty" json:"mediaType,omitempty" xml:"mediaType,omitempty"`
	URL       *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// PageInfoResponseBody is used to define fields on response body types.
type PageInfoResponseBody struct {
	// The starting cursor for pagination
	StartCursor *int `form:"startCursor,omitempty" json:"startCursor,omitempty" xml:"startCursor,omitempty"`
	// The ending cursor for pagination
	EndCursor *int `form:"endCursor,omitempty" json:"endCursor,omitempty" xml:"endCursor,omitempty"`
	// Indicates if there are more results available
	HasMore *bool `form:"hasMore,omitempty" json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// Total number of resources available
	TotalResource *int `form:"totalResource,omitempty" json:"totalResource,omitempty" xml:"totalResource,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "svc-media" service.
func NewCreateRequestBody(p *svcmedia.MediaInput) *CreateRequestBody {
	body := &CreateRequestBody{
		Filename: p.Filename,
		MimeType: p.MimeType,
		Size:     p.Size,
		Bucket:   p.Bucket,
		Key:      p.Key,
	}
	return body
}

// NewListMediaListOK builds a "svc-media" service "list" endpoint result from
// a HTTP "OK" response.
func NewListMediaListOK(body *ListResponseBody) *svcmediaviews.MediaListView {
	v := &svcmediaviews.MediaListView{}
	if body.Data != nil {
		v.Data = make([]*svcmediaviews.MediaView, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalMediaResponseBodyToSvcmediaviewsMediaView(val)
		}
	}
	if body.PageInfo != nil {
		v.PageInfo = unmarshalPageInfoResponseBodyToSvcmediaviewsPageInfoView(body.PageInfo)
	}

	return v
}

// NewListBadRequest builds a svc-media service list endpoint BadRequest error.
func NewListBadRequest(body *ListBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetByIDMediaOK builds a "svc-media" service "getById" endpoint result
// from a HTTP "OK" response.
func NewGetByIDMediaOK(body *GetByIDResponseBody) *svcmediaviews.MediaView {
	v := &svcmediaviews.MediaView{
		ID:  body.ID,
		URL: body.URL,
	}
	mediaType := svcmediaviews.MediaTypeView(*body.MediaType)
	v.MediaType = &mediaType

	return v
}

// NewGetByIDNotFound builds a svc-media service getById endpoint NotFound
// error.
func NewGetByIDNotFound(body *GetByIDNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateMediaCreated builds a "svc-media" service "create" endpoint result
// from a HTTP "Created" response.
func NewCreateMediaCreated(body *CreateResponseBody) *svcmediaviews.MediaView {
	v := &svcmediaviews.MediaView{
		ID:  body.ID,
		URL: body.URL,
	}
	mediaType := svcmediaviews.MediaTypeView(*body.MediaType)
	v.MediaType = &mediaType

	return v
}

// NewCreateBadRequest builds a svc-media service create endpoint BadRequest
// error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteByIDNotFound builds a svc-media service deleteById endpoint
// NotFound error.
func NewDeleteByIDNotFound(body *DeleteByIDNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListBadRequestResponseBody runs the validations defined on
// list_BadRequest_response_body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetByIDNotFoundResponseBody runs the validations defined on
// getById_NotFound_response_body
func ValidateGetByIDNotFoundResponseBody(body *GetByIDNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_BadRequest_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteByIDNotFoundResponseBody runs the validations defined on
// deleteById_NotFound_response_body
func ValidateDeleteByIDNotFoundResponseBody(body *DeleteByIDNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMediaCollectionResponseBody runs the validations defined on
// MediaCollectionResponseBody
func ValidateMediaCollectionResponseBody(body MediaCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateMediaResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateMediaResponseBody runs the validations defined on MediaResponseBody
func ValidateMediaResponseBody(body *MediaResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.MediaType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mediaType", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.MediaType != nil {
		if !(*body.MediaType == "IMAGE" || *body.MediaType == "VIDEO" || *body.MediaType == "UNKNWON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.mediaType", *body.MediaType, []any{"IMAGE", "VIDEO", "UNKNWON"}))
		}
	}
	return
}

// ValidatePageInfoResponseBody runs the validations defined on
// Page-InfoResponseBody
func ValidatePageInfoResponseBody(body *PageInfoResponseBody) (err error) {
	if body.StartCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startCursor", "body"))
	}
	if body.EndCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endCursor", "body"))
	}
	if body.HasMore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hasMore", "body"))
	}
	if body.TotalResource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalResource", "body"))
	}
	return
}
