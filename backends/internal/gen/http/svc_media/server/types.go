// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-media HTTP server types
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package server

import (
	svcmedia "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_media"
	svcmediaviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_media/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "svc-media" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	MimeType *string `form:"mimeType,omitempty" json:"mimeType,omitempty" xml:"mimeType,omitempty"`
	Size     *int    `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	Bucket   *string `form:"bucket,omitempty" json:"bucket,omitempty" xml:"bucket,omitempty"`
	Key      *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
}

// ListResponseBody is the type of the "svc-media" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// Data
	Data MediaResponseBodyCollection `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Pagination information
	PageInfo *PageInfoResponseBody `form:"pageInfo,omitempty" json:"pageInfo,omitempty" xml:"pageInfo,omitempty"`
}

// GetByIDResponseBody is the type of the "svc-media" service "getById"
// endpoint HTTP response body.
type GetByIDResponseBody struct {
	// Key ID
	ID        int    `form:"id" json:"id" xml:"id"`
	MediaType string `form:"mediaType" json:"mediaType" xml:"mediaType"`
	URL       string `form:"url" json:"url" xml:"url"`
}

// CreateResponseBody is the type of the "svc-media" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Key ID
	ID        int    `form:"id" json:"id" xml:"id"`
	MediaType string `form:"mediaType" json:"mediaType" xml:"mediaType"`
	URL       string `form:"url" json:"url" xml:"url"`
}

// ListBadRequestResponseBody is the type of the "svc-media" service "list"
// endpoint HTTP response body for the "BadRequest" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetByIDNotFoundResponseBody is the type of the "svc-media" service "getById"
// endpoint HTTP response body for the "NotFound" error.
type GetByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBadRequestResponseBody is the type of the "svc-media" service "create"
// endpoint HTTP response body for the "BadRequest" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteByIDNotFoundResponseBody is the type of the "svc-media" service
// "deleteById" endpoint HTTP response body for the "NotFound" error.
type DeleteByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MediaResponseBodyCollection is used to define fields on response body types.
type MediaResponseBodyCollection []*MediaResponseBody

// MediaResponseBody is used to define fields on response body types.
type MediaResponseBody struct {
	// Key ID
	ID        int    `form:"id" json:"id" xml:"id"`
	MediaType string `form:"mediaType" json:"mediaType" xml:"mediaType"`
	URL       string `form:"url" json:"url" xml:"url"`
}

// PageInfoResponseBody is used to define fields on response body types.
type PageInfoResponseBody struct {
	// The starting cursor for pagination
	StartCursor int `form:"startCursor" json:"startCursor" xml:"startCursor"`
	// The ending cursor for pagination
	EndCursor int `form:"endCursor" json:"endCursor" xml:"endCursor"`
	// Indicates if there are more results available
	HasMore bool `form:"hasMore" json:"hasMore" xml:"hasMore"`
	// Total number of resources available
	TotalResource int `form:"totalResource" json:"totalResource" xml:"totalResource"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "svc-media" service.
func NewListResponseBody(res *svcmediaviews.MediaListView) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Data != nil {
		body.Data = make([]*MediaResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalSvcmediaviewsMediaViewToMediaResponseBody(val)
		}
	}
	if res.PageInfo != nil {
		body.PageInfo = marshalSvcmediaviewsPageInfoViewToPageInfoResponseBody(res.PageInfo)
	}
	return body
}

// NewGetByIDResponseBody builds the HTTP response body from the result of the
// "getById" endpoint of the "svc-media" service.
func NewGetByIDResponseBody(res *svcmediaviews.MediaView) *GetByIDResponseBody {
	body := &GetByIDResponseBody{
		ID:        *res.ID,
		MediaType: string(*res.MediaType),
		URL:       *res.URL,
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "svc-media" service.
func NewCreateResponseBody(res *svcmediaviews.MediaView) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:        *res.ID,
		MediaType: string(*res.MediaType),
		URL:       *res.URL,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "svc-media" service.
func NewListBadRequestResponseBody(res *goa.ServiceError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetByIDNotFoundResponseBody builds the HTTP response body from the result
// of the "getById" endpoint of the "svc-media" service.
func NewGetByIDNotFoundResponseBody(res *goa.ServiceError) *GetByIDNotFoundResponseBody {
	body := &GetByIDNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "svc-media" service.
func NewCreateBadRequestResponseBody(res *goa.ServiceError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteByIDNotFoundResponseBody builds the HTTP response body from the
// result of the "deleteById" endpoint of the "svc-media" service.
func NewDeleteByIDNotFoundResponseBody(res *goa.ServiceError) *DeleteByIDNotFoundResponseBody {
	body := &DeleteByIDNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a svc-media service list endpoint payload.
func NewListPayload(pageSize int, after int, bucket string) *svcmedia.ListPayload {
	v := &svcmedia.ListPayload{}
	v.PageSize = pageSize
	v.After = after
	v.Bucket = bucket

	return v
}

// NewGetByIDPayload builds a svc-media service getById endpoint payload.
func NewGetByIDPayload(mediaID int) *svcmedia.GetByIDPayload {
	v := &svcmedia.GetByIDPayload{}
	v.MediaID = &mediaID

	return v
}

// NewCreateMediaInput builds a svc-media service create endpoint payload.
func NewCreateMediaInput(body *CreateRequestBody) *svcmedia.MediaInput {
	v := &svcmedia.MediaInput{
		Filename: *body.Filename,
		MimeType: *body.MimeType,
		Size:     *body.Size,
		Bucket:   *body.Bucket,
		Key:      *body.Key,
	}

	return v
}

// NewDeleteByIDPayload builds a svc-media service deleteById endpoint payload.
func NewDeleteByIDPayload(mediaID int) *svcmedia.DeleteByIDPayload {
	v := &svcmedia.DeleteByIDPayload{}
	v.MediaID = &mediaID

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.MimeType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mimeType", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	if body.Bucket == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bucket", "body"))
	}
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	return
}
