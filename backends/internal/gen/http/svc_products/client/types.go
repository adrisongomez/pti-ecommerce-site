// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-products HTTP client types
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package client

import (
	svcproducts "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_products"
	svcproductsviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_products/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateProductRequestBody is the type of the "svc-products" service
// "createProduct" endpoint HTTP request body.
type CreateProductRequestBody struct {
	// Title's product
	Title string `form:"title" json:"title" xml:"title"`
	// Product description
	Description string `form:"description" json:"description" xml:"description"`
	// Last part of the url which use to idepntify the user
	Handle *string `form:"handle,omitempty" json:"handle,omitempty" xml:"handle,omitempty"`
	// Product's status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Product tags
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Vendor's product
	VendorID string `form:"vendorId" json:"vendorId" xml:"vendorId"`
	// Product variants
	Variants []*ProductVariantInputRequestBody `form:"variants,omitempty" json:"variants,omitempty" xml:"variants,omitempty"`
	Medias   []*ProductMediaInputRequestBody   `form:"medias,omitempty" json:"medias,omitempty" xml:"medias,omitempty"`
}

// UpdateProductByIDRequestBody is the type of the "svc-products" service
// "updateProductById" endpoint HTTP request body.
type UpdateProductByIDRequestBody struct {
	// Title's product
	Title string `form:"title" json:"title" xml:"title"`
	// Product description
	Description string `form:"description" json:"description" xml:"description"`
	// Last part of the url which use to idepntify the user
	Handle *string `form:"handle,omitempty" json:"handle,omitempty" xml:"handle,omitempty"`
	// Product's status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Product tags
	Tags []string `form:"tags" json:"tags" xml:"tags"`
	// Vendor's product
	VendorID string `form:"vendorId" json:"vendorId" xml:"vendorId"`
	// Product variants
	Variants []*ProductVariantInputRequestBodyRequestBody `form:"variants,omitempty" json:"variants,omitempty" xml:"variants,omitempty"`
	Medias   []*ProductMediaInputRequestBodyRequestBody   `form:"medias,omitempty" json:"medias,omitempty" xml:"medias,omitempty"`
}

// ListProductResponseBody is the type of the "svc-products" service
// "listProduct" endpoint HTTP response body.
type ListProductResponseBody struct {
	// Data
	Data ProductCollectionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Pagination information
	PageInfo *PageInfoResponseBody `form:"pageInfo,omitempty" json:"pageInfo,omitempty" xml:"pageInfo,omitempty"`
}

// GetProductByIDResponseBody is the type of the "svc-products" service
// "getProductById" endpoint HTTP response body.
type GetProductByIDResponseBody struct {
	// Key ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Product description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Handle
	Handle *string             `form:"handle,omitempty" json:"handle,omitempty" xml:"handle,omitempty"`
	Vendor *VendorResponseBody `form:"vendor,omitempty" json:"vendor,omitempty" xml:"vendor,omitempty"`
	// Product tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The product's status on ecommerce site
	Status   *string                       `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	Variants []*ProductVariantResponseBody `form:"variants,omitempty" json:"variants,omitempty" xml:"variants,omitempty"`
	Medias   []*ProductMediaResponseBody   `form:"medias,omitempty" json:"medias,omitempty" xml:"medias,omitempty"`
}

// CreateProductResponseBody is the type of the "svc-products" service
// "createProduct" endpoint HTTP response body.
type CreateProductResponseBody struct {
	// Key ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Product description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Handle
	Handle *string             `form:"handle,omitempty" json:"handle,omitempty" xml:"handle,omitempty"`
	Vendor *VendorResponseBody `form:"vendor,omitempty" json:"vendor,omitempty" xml:"vendor,omitempty"`
	// Product tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The product's status on ecommerce site
	Status   *string                       `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	Variants []*ProductVariantResponseBody `form:"variants,omitempty" json:"variants,omitempty" xml:"variants,omitempty"`
	Medias   []*ProductMediaResponseBody   `form:"medias,omitempty" json:"medias,omitempty" xml:"medias,omitempty"`
}

// UpdateProductByIDResponseBody is the type of the "svc-products" service
// "updateProductById" endpoint HTTP response body.
type UpdateProductByIDResponseBody struct {
	// Key ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Product description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Handle
	Handle *string             `form:"handle,omitempty" json:"handle,omitempty" xml:"handle,omitempty"`
	Vendor *VendorResponseBody `form:"vendor,omitempty" json:"vendor,omitempty" xml:"vendor,omitempty"`
	// Product tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The product's status on ecommerce site
	Status   *string                       `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	Variants []*ProductVariantResponseBody `form:"variants,omitempty" json:"variants,omitempty" xml:"variants,omitempty"`
	Medias   []*ProductMediaResponseBody   `form:"medias,omitempty" json:"medias,omitempty" xml:"medias,omitempty"`
}

// ListProductBadRequestResponseBody is the type of the "svc-products" service
// "listProduct" endpoint HTTP response body for the "BadRequest" error.
type ListProductBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetProductByIDNotFoundResponseBody is the type of the "svc-products" service
// "getProductById" endpoint HTTP response body for the "NotFound" error.
type GetProductByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateProductConflictResponseBody is the type of the "svc-products" service
// "createProduct" endpoint HTTP response body for the "Conflict" error.
type CreateProductConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateProductByIDConflictResponseBody is the type of the "svc-products"
// service "updateProductById" endpoint HTTP response body for the "Conflict"
// error.
type UpdateProductByIDConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteProductByIDNotFoundResponseBody is the type of the "svc-products"
// service "deleteProductById" endpoint HTTP response body for the "NotFound"
// error.
type DeleteProductByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ProductCollectionResponseBody is used to define fields on response body
// types.
type ProductCollectionResponseBody []*ProductResponseBody

// ProductResponseBody is used to define fields on response body types.
type ProductResponseBody struct {
	// Key ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Product description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Handle
	Handle *string             `form:"handle,omitempty" json:"handle,omitempty" xml:"handle,omitempty"`
	Vendor *VendorResponseBody `form:"vendor,omitempty" json:"vendor,omitempty" xml:"vendor,omitempty"`
	// Product tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// The product's status on ecommerce site
	Status   *string                       `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	Variants []*ProductVariantResponseBody `form:"variants,omitempty" json:"variants,omitempty" xml:"variants,omitempty"`
	Medias   []*ProductMediaResponseBody   `form:"medias,omitempty" json:"medias,omitempty" xml:"medias,omitempty"`
}

// VendorResponseBody is used to define fields on response body types.
type VendorResponseBody struct {
	// Key ID
	ID   *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ProductVariantResponseBody is used to define fields on response body types.
type ProductVariantResponseBody struct {
	// Key ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Color variant option
	ColorName *string `form:"colorName,omitempty" json:"colorName,omitempty" xml:"colorName,omitempty"`
	// Color in HEX value that would be used on the variant picker
	ColorHex *string `form:"colorHex,omitempty" json:"colorHex,omitempty" xml:"colorHex,omitempty"`
	// Price on cents
	Price *int `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Product where the variant belongs to
	ProductID *string `form:"productId,omitempty" json:"productId,omitempty" xml:"productId,omitempty"`
	// ProductMedia which would be focus when a variant is picked by the user
	FeatureMediaID *string `form:"featureMediaId,omitempty" json:"featureMediaId,omitempty" xml:"featureMediaId,omitempty"`
}

// ProductMediaResponseBody is used to define fields on response body types.
type ProductMediaResponseBody struct {
	// Key ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// URL to the media
	URL       *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	MediaType *string `form:"mediaType,omitempty" json:"mediaType,omitempty" xml:"mediaType,omitempty"`
}

// PageInfoResponseBody is used to define fields on response body types.
type PageInfoResponseBody struct {
	// The starting cursor for pagination
	StartCursor *int `form:"startCursor,omitempty" json:"startCursor,omitempty" xml:"startCursor,omitempty"`
	// The ending cursor for pagination
	EndCursor *int `form:"endCursor,omitempty" json:"endCursor,omitempty" xml:"endCursor,omitempty"`
	// Indicates if there are more results available
	HasMore *int `form:"hasMore,omitempty" json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// Total number of resources available
	TotalResource *int `form:"totalResource,omitempty" json:"totalResource,omitempty" xml:"totalResource,omitempty"`
}

// ProductVariantInputRequestBody is used to define fields on request body
// types.
type ProductVariantInputRequestBody struct {
	// Color variant option
	ColorName string `form:"colorName" json:"colorName" xml:"colorName"`
	// Color in HEX value that would be used on the variant picker
	ColorHex *string `form:"colorHex,omitempty" json:"colorHex,omitempty" xml:"colorHex,omitempty"`
	// Price on cents
	Price int `form:"price" json:"price" xml:"price"`
}

// ProductMediaInputRequestBody is used to define fields on request body types.
type ProductMediaInputRequestBody struct {
	// ID of the media record where the resource has being upload
	MediaID string `form:"mediaId" json:"mediaId" xml:"mediaId"`
	// Position on the images of the product
	SortNumber int `form:"sortNumber" json:"sortNumber" xml:"sortNumber"`
	// Alt text that would show in case the image does not render
	Alt *string `form:"alt,omitempty" json:"alt,omitempty" xml:"alt,omitempty"`
}

// ProductVariantInputRequestBodyRequestBody is used to define fields on
// request body types.
type ProductVariantInputRequestBodyRequestBody struct {
	// Color variant option
	ColorName string `form:"colorName" json:"colorName" xml:"colorName"`
	// Color in HEX value that would be used on the variant picker
	ColorHex *string `form:"colorHex,omitempty" json:"colorHex,omitempty" xml:"colorHex,omitempty"`
	// Price on cents
	Price int `form:"price" json:"price" xml:"price"`
}

// ProductMediaInputRequestBodyRequestBody is used to define fields on request
// body types.
type ProductMediaInputRequestBodyRequestBody struct {
	// ID of the media record where the resource has being upload
	MediaID string `form:"mediaId" json:"mediaId" xml:"mediaId"`
	// Position on the images of the product
	SortNumber int `form:"sortNumber" json:"sortNumber" xml:"sortNumber"`
	// Alt text that would show in case the image does not render
	Alt *string `form:"alt,omitempty" json:"alt,omitempty" xml:"alt,omitempty"`
}

// NewCreateProductRequestBody builds the HTTP request body from the payload of
// the "createProduct" endpoint of the "svc-products" service.
func NewCreateProductRequestBody(p *svcproducts.ProductInput) *CreateProductRequestBody {
	body := &CreateProductRequestBody{
		Title:       p.Title,
		Description: p.Description,
		Handle:      p.Handle,
		VendorID:    p.VendorID,
	}
	if p.Status != nil {
		status := string(*p.Status)
		body.Status = &status
	}
	if p.Tags != nil {
		body.Tags = make([]string, len(p.Tags))
		for i, val := range p.Tags {
			body.Tags[i] = val
		}
	} else {
		body.Tags = []string{}
	}
	if p.Variants != nil {
		body.Variants = make([]*ProductVariantInputRequestBody, len(p.Variants))
		for i, val := range p.Variants {
			body.Variants[i] = marshalSvcproductsProductVariantInputToProductVariantInputRequestBody(val)
		}
	}
	if p.Medias != nil {
		body.Medias = make([]*ProductMediaInputRequestBody, len(p.Medias))
		for i, val := range p.Medias {
			body.Medias[i] = marshalSvcproductsProductMediaInputToProductMediaInputRequestBody(val)
		}
	}
	return body
}

// NewUpdateProductByIDRequestBody builds the HTTP request body from the
// payload of the "updateProductById" endpoint of the "svc-products" service.
func NewUpdateProductByIDRequestBody(p *svcproducts.UpdateProductByIDPayload) *UpdateProductByIDRequestBody {
	body := &UpdateProductByIDRequestBody{
		Title:       p.Payload.Title,
		Description: p.Payload.Description,
		Handle:      p.Payload.Handle,
		VendorID:    p.Payload.VendorID,
	}
	if p.Payload.Status != nil {
		status := string(*p.Payload.Status)
		body.Status = &status
	}
	if p.Payload.Tags != nil {
		body.Tags = make([]string, len(p.Payload.Tags))
		for i, val := range p.Payload.Tags {
			body.Tags[i] = val
		}
	} else {
		body.Tags = []string{}
	}
	if p.Payload.Variants != nil {
		body.Variants = make([]*ProductVariantInputRequestBodyRequestBody, len(p.Payload.Variants))
		for i, val := range p.Payload.Variants {
			body.Variants[i] = marshalSvcproductsProductVariantInputToProductVariantInputRequestBodyRequestBody(val)
		}
	}
	if p.Payload.Medias != nil {
		body.Medias = make([]*ProductMediaInputRequestBodyRequestBody, len(p.Payload.Medias))
		for i, val := range p.Payload.Medias {
			body.Medias[i] = marshalSvcproductsProductMediaInputToProductMediaInputRequestBodyRequestBody(val)
		}
	}
	return body
}

// NewListProductProductsListOK builds a "svc-products" service "listProduct"
// endpoint result from a HTTP "OK" response.
func NewListProductProductsListOK(body *ListProductResponseBody) *svcproductsviews.ProductsListView {
	v := &svcproductsviews.ProductsListView{}
	if body.Data != nil {
		v.Data = make([]*svcproductsviews.ProductView, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalProductResponseBodyToSvcproductsviewsProductView(val)
		}
	}
	if body.PageInfo != nil {
		v.PageInfo = unmarshalPageInfoResponseBodyToSvcproductsviewsPageInfoView(body.PageInfo)
	}

	return v
}

// NewListProductBadRequest builds a svc-products service listProduct endpoint
// BadRequest error.
func NewListProductBadRequest(body *ListProductBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetProductByIDProductOK builds a "svc-products" service "getProductById"
// endpoint result from a HTTP "OK" response.
func NewGetProductByIDProductOK(body *GetProductByIDResponseBody) *svcproductsviews.ProductView {
	v := &svcproductsviews.ProductView{
		ID:          body.ID,
		Title:       body.Title,
		Description: body.Description,
		Handle:      body.Handle,
	}
	status := svcproductsviews.ProductStatusView(*body.Status)
	v.Status = &status
	if body.Vendor != nil {
		v.Vendor = unmarshalVendorResponseBodyToSvcproductsviewsVendorView(body.Vendor)
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	if body.Variants != nil {
		v.Variants = make([]*svcproductsviews.ProductVariantView, len(body.Variants))
		for i, val := range body.Variants {
			v.Variants[i] = unmarshalProductVariantResponseBodyToSvcproductsviewsProductVariantView(val)
		}
	}
	if body.Medias != nil {
		v.Medias = make([]*svcproductsviews.ProductMediaView, len(body.Medias))
		for i, val := range body.Medias {
			v.Medias[i] = unmarshalProductMediaResponseBodyToSvcproductsviewsProductMediaView(val)
		}
	}

	return v
}

// NewGetProductByIDNotFound builds a svc-products service getProductById
// endpoint NotFound error.
func NewGetProductByIDNotFound(body *GetProductByIDNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateProductProductCreated builds a "svc-products" service
// "createProduct" endpoint result from a HTTP "Created" response.
func NewCreateProductProductCreated(body *CreateProductResponseBody) *svcproductsviews.ProductView {
	v := &svcproductsviews.ProductView{
		ID:          body.ID,
		Title:       body.Title,
		Description: body.Description,
		Handle:      body.Handle,
	}
	status := svcproductsviews.ProductStatusView(*body.Status)
	v.Status = &status
	if body.Vendor != nil {
		v.Vendor = unmarshalVendorResponseBodyToSvcproductsviewsVendorView(body.Vendor)
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	if body.Variants != nil {
		v.Variants = make([]*svcproductsviews.ProductVariantView, len(body.Variants))
		for i, val := range body.Variants {
			v.Variants[i] = unmarshalProductVariantResponseBodyToSvcproductsviewsProductVariantView(val)
		}
	}
	if body.Medias != nil {
		v.Medias = make([]*svcproductsviews.ProductMediaView, len(body.Medias))
		for i, val := range body.Medias {
			v.Medias[i] = unmarshalProductMediaResponseBodyToSvcproductsviewsProductMediaView(val)
		}
	}

	return v
}

// NewCreateProductConflict builds a svc-products service createProduct
// endpoint Conflict error.
func NewCreateProductConflict(body *CreateProductConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateProductByIDProductOK builds a "svc-products" service
// "updateProductById" endpoint result from a HTTP "OK" response.
func NewUpdateProductByIDProductOK(body *UpdateProductByIDResponseBody) *svcproductsviews.ProductView {
	v := &svcproductsviews.ProductView{
		ID:          body.ID,
		Title:       body.Title,
		Description: body.Description,
		Handle:      body.Handle,
	}
	status := svcproductsviews.ProductStatusView(*body.Status)
	v.Status = &status
	if body.Vendor != nil {
		v.Vendor = unmarshalVendorResponseBodyToSvcproductsviewsVendorView(body.Vendor)
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	if body.Variants != nil {
		v.Variants = make([]*svcproductsviews.ProductVariantView, len(body.Variants))
		for i, val := range body.Variants {
			v.Variants[i] = unmarshalProductVariantResponseBodyToSvcproductsviewsProductVariantView(val)
		}
	}
	if body.Medias != nil {
		v.Medias = make([]*svcproductsviews.ProductMediaView, len(body.Medias))
		for i, val := range body.Medias {
			v.Medias[i] = unmarshalProductMediaResponseBodyToSvcproductsviewsProductMediaView(val)
		}
	}

	return v
}

// NewUpdateProductByIDConflict builds a svc-products service updateProductById
// endpoint Conflict error.
func NewUpdateProductByIDConflict(body *UpdateProductByIDConflictResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteProductByIDNotFound builds a svc-products service deleteProductById
// endpoint NotFound error.
func NewDeleteProductByIDNotFound(body *DeleteProductByIDNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListProductBadRequestResponseBody runs the validations defined on
// listProduct_BadRequest_response_body
func ValidateListProductBadRequestResponseBody(body *ListProductBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetProductByIDNotFoundResponseBody runs the validations defined on
// getProductById_NotFound_response_body
func ValidateGetProductByIDNotFoundResponseBody(body *GetProductByIDNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateProductConflictResponseBody runs the validations defined on
// createProduct_Conflict_response_body
func ValidateCreateProductConflictResponseBody(body *CreateProductConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateProductByIDConflictResponseBody runs the validations defined
// on updateProductById_Conflict_response_body
func ValidateUpdateProductByIDConflictResponseBody(body *UpdateProductByIDConflictResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteProductByIDNotFoundResponseBody runs the validations defined
// on deleteProductById_NotFound_response_body
func ValidateDeleteProductByIDNotFoundResponseBody(body *DeleteProductByIDNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateProductCollectionResponseBody runs the validations defined on
// ProductCollectionResponseBody
func ValidateProductCollectionResponseBody(body ProductCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateProductResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateProductResponseBody runs the validations defined on
// ProductResponseBody
func ValidateProductResponseBody(body *ProductResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Handle == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("handle", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.Vendor != nil {
		if err2 := ValidateVendorResponseBody(body.Vendor); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "ACTIVE" || *body.Status == "DRAFT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"ACTIVE", "DRAFT"}))
		}
	}
	for _, e := range body.Variants {
		if e != nil {
			if err2 := ValidateProductVariantResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Medias {
		if e != nil {
			if err2 := ValidateProductMediaResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateVendorResponseBody runs the validations defined on VendorResponseBody
func ValidateVendorResponseBody(body *VendorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	return
}

// ValidateProductVariantResponseBody runs the validations defined on
// Product-VariantResponseBody
func ValidateProductVariantResponseBody(body *ProductVariantResponseBody) (err error) {
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	return
}

// ValidateProductMediaResponseBody runs the validations defined on
// Product-MediaResponseBody
func ValidateProductMediaResponseBody(body *ProductMediaResponseBody) (err error) {
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	return
}

// ValidatePageInfoResponseBody runs the validations defined on
// Page-InfoResponseBody
func ValidatePageInfoResponseBody(body *PageInfoResponseBody) (err error) {
	if body.StartCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startCursor", "body"))
	}
	if body.EndCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endCursor", "body"))
	}
	if body.HasMore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hasMore", "body"))
	}
	if body.TotalResource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalResource", "body"))
	}
	return
}
