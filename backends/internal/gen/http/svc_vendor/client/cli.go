// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-vendor HTTP client CLI support package
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	svcvendor "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_vendor"
	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the svc-vendor list endpoint from
// CLI flags.
func BuildListPayload(svcVendorListPageSize string, svcVendorListAfter string) (*svcvendor.ListPayload, error) {
	var err error
	var pageSize int
	{
		if svcVendorListPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(svcVendorListPageSize, 10, strconv.IntSize)
			pageSize = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
			if pageSize < 10 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", pageSize, 10, true))
			}
			if pageSize > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", pageSize, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var after int
	{
		if svcVendorListAfter != "" {
			var v int64
			v, err = strconv.ParseInt(svcVendorListAfter, 10, strconv.IntSize)
			after = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for after, must be INT")
			}
		}
	}
	v := &svcvendor.ListPayload{}
	v.PageSize = pageSize
	v.After = after

	return v, nil
}

// BuildCreatePayload builds the payload for the svc-vendor create endpoint
// from CLI flags.
func BuildCreatePayload(svcVendorCreateBody string) (*svcvendor.VendorInput, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(svcVendorCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Qui voluptatum quia unde tenetur.\"\n   }'")
		}
	}
	v := &svcvendor.VendorInput{
		Name: body.Name,
	}

	return v, nil
}

// BuildDeleteByIDPayload builds the payload for the svc-vendor deleteById
// endpoint from CLI flags.
func BuildDeleteByIDPayload(svcVendorDeleteByIDVendorID string) (*svcvendor.DeleteByIDPayload, error) {
	var err error
	var vendorID int
	{
		var v int64
		v, err = strconv.ParseInt(svcVendorDeleteByIDVendorID, 10, strconv.IntSize)
		vendorID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for vendorID, must be INT")
		}
	}
	v := &svcvendor.DeleteByIDPayload{}
	v.VendorID = vendorID

	return v, nil
}
