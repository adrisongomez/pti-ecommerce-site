// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-healthcheck service
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package svchealthcheck

import (
	"context"

	svchealthcheckviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_healthcheck/views"
)

// Service is the svc-healthcheck service interface.
type Service interface {
	// Check implements check.
	Check(context.Context) (res *HealthcheckResponse, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "ecommerce"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "svc-healthcheck"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"check"}

// HealthcheckResponse is the result type of the svc-healthcheck service check
// method.
type HealthcheckResponse struct {
	Status *string
}

// NewHealthcheckResponse initializes result type HealthcheckResponse from
// viewed result type HealthcheckResponse.
func NewHealthcheckResponse(vres *svchealthcheckviews.HealthcheckResponse) *HealthcheckResponse {
	return newHealthcheckResponse(vres.Projected)
}

// NewViewedHealthcheckResponse initializes viewed result type
// HealthcheckResponse from result type HealthcheckResponse using the given
// view.
func NewViewedHealthcheckResponse(res *HealthcheckResponse, view string) *svchealthcheckviews.HealthcheckResponse {
	p := newHealthcheckResponseView(res)
	return &svchealthcheckviews.HealthcheckResponse{Projected: p, View: "default"}
}

// newHealthcheckResponse converts projected type HealthcheckResponse to
// service type HealthcheckResponse.
func newHealthcheckResponse(vres *svchealthcheckviews.HealthcheckResponseView) *HealthcheckResponse {
	res := &HealthcheckResponse{
		Status: vres.Status,
	}
	return res
}

// newHealthcheckResponseView projects result type HealthcheckResponse to
// projected type HealthcheckResponseView using the "default" view.
func newHealthcheckResponseView(res *HealthcheckResponse) *svchealthcheckviews.HealthcheckResponseView {
	vres := &svchealthcheckviews.HealthcheckResponseView{
		Status: res.Status,
	}
	return vres
}
