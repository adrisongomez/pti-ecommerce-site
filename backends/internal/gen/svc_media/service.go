// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-media service
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package svcmedia

import (
	"context"

	svcmediaviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_media/views"
	goa "goa.design/goa/v3/pkg"
)

// Service perform CRUDs over media resource
type Service interface {
	// Create a media record
	List(context.Context, *ListPayload) (res *MediaList, err error)
	// Get a media by id
	GetByID(context.Context, *GetByIDPayload) (res *Media, err error)
	// Create a media record
	Create(context.Context, *MediaInput) (res *Media, err error)
	// Create a media record
	DeleteByID(context.Context, *DeleteByIDPayload) (res bool, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "ecommerce"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "svc-media"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"list", "getById", "create", "deleteById"}

// DeleteByIDPayload is the payload type of the svc-media service deleteById
// method.
type DeleteByIDPayload struct {
	MediaID *int
}

// GetByIDPayload is the payload type of the svc-media service getById method.
type GetByIDPayload struct {
	MediaID *int
}

// ListPayload is the payload type of the svc-media service list method.
type ListPayload struct {
	// Record per page
	PageSize int
	// Start listing after this resource
	After int
	// S3 bucket where data is store
	Bucket string
}

// Media is the result type of the svc-media service getById method.
type Media struct {
	// Key ID
	ID        int
	MediaType MediaType
	URL       string
}

type MediaCollection []*Media

// MediaInput is the payload type of the svc-media service create method.
type MediaInput struct {
	Filename string
	MimeType string
	Size     int
	Bucket   string
	Key      string
}

// MediaList is the result type of the svc-media service list method.
type MediaList struct {
	// Data
	Data MediaCollection
	// Pagination information
	PageInfo *PageInfo
}

// Type of the media
type MediaType string

// Pagination information
type PageInfo struct {
	// The starting cursor for pagination
	StartCursor int
	// The ending cursor for pagination
	EndCursor int
	// Indicates if there are more results available
	HasMore bool
	// Total number of resources available
	TotalResource int
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// NewMediaList initializes result type MediaList from viewed result type
// MediaList.
func NewMediaList(vres *svcmediaviews.MediaList) *MediaList {
	return newMediaList(vres.Projected)
}

// NewViewedMediaList initializes viewed result type MediaList from result type
// MediaList using the given view.
func NewViewedMediaList(res *MediaList, view string) *svcmediaviews.MediaList {
	p := newMediaListView(res)
	return &svcmediaviews.MediaList{Projected: p, View: "default"}
}

// NewMedia initializes result type Media from viewed result type Media.
func NewMedia(vres *svcmediaviews.Media) *Media {
	return newMedia(vres.Projected)
}

// NewViewedMedia initializes viewed result type Media from result type Media
// using the given view.
func NewViewedMedia(res *Media, view string) *svcmediaviews.Media {
	p := newMediaView(res)
	return &svcmediaviews.Media{Projected: p, View: "default"}
}

// newMediaList converts projected type MediaList to service type MediaList.
func newMediaList(vres *svcmediaviews.MediaListView) *MediaList {
	res := &MediaList{}
	if vres.Data != nil {
		res.Data = newMediaCollection(vres.Data)
	}
	if vres.PageInfo != nil {
		res.PageInfo = newPageInfo(vres.PageInfo)
	}
	return res
}

// newMediaListView projects result type MediaList to projected type
// MediaListView using the "default" view.
func newMediaListView(res *MediaList) *svcmediaviews.MediaListView {
	vres := &svcmediaviews.MediaListView{}
	if res.Data != nil {
		vres.Data = newMediaCollectionView(res.Data)
	}
	if res.PageInfo != nil {
		vres.PageInfo = newPageInfoView(res.PageInfo)
	}
	return vres
}

// newMediaCollection converts projected type MediaCollection to service type
// MediaCollection.
func newMediaCollection(vres svcmediaviews.MediaCollectionView) MediaCollection {
	res := make(MediaCollection, len(vres))
	for i, n := range vres {
		res[i] = newMedia(n)
	}
	return res
}

// newMediaCollectionView projects result type MediaCollection to projected
// type MediaCollectionView using the "default" view.
func newMediaCollectionView(res MediaCollection) svcmediaviews.MediaCollectionView {
	vres := make(svcmediaviews.MediaCollectionView, len(res))
	for i, n := range res {
		vres[i] = newMediaView(n)
	}
	return vres
}

// newMedia converts projected type Media to service type Media.
func newMedia(vres *svcmediaviews.MediaView) *Media {
	res := &Media{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.MediaType != nil {
		res.MediaType = MediaType(*vres.MediaType)
	}
	if vres.URL != nil {
		res.URL = *vres.URL
	}
	return res
}

// newMediaView projects result type Media to projected type MediaView using
// the "default" view.
func newMediaView(res *Media) *svcmediaviews.MediaView {
	vres := &svcmediaviews.MediaView{
		ID:  &res.ID,
		URL: &res.URL,
	}
	mediaType := svcmediaviews.MediaTypeView(res.MediaType)
	vres.MediaType = &mediaType
	return vres
}

// newPageInfo converts projected type PageInfo to service type PageInfo.
func newPageInfo(vres *svcmediaviews.PageInfoView) *PageInfo {
	res := &PageInfo{}
	if vres.StartCursor != nil {
		res.StartCursor = *vres.StartCursor
	}
	if vres.EndCursor != nil {
		res.EndCursor = *vres.EndCursor
	}
	if vres.HasMore != nil {
		res.HasMore = *vres.HasMore
	}
	if vres.TotalResource != nil {
		res.TotalResource = *vres.TotalResource
	}
	return res
}

// newPageInfoView projects result type PageInfo to projected type PageInfoView
// using the "default" view.
func newPageInfoView(res *PageInfo) *svcmediaviews.PageInfoView {
	vres := &svcmediaviews.PageInfoView{
		StartCursor:   &res.StartCursor,
		EndCursor:     &res.EndCursor,
		HasMore:       &res.HasMore,
		TotalResource: &res.TotalResource,
	}
	return vres
}
