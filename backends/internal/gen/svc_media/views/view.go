// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-media views
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// MediaList is the viewed result type that is projected based on a view.
type MediaList struct {
	// Type to project
	Projected *MediaListView
	// View to render
	View string
}

// Media is the viewed result type that is projected based on a view.
type Media struct {
	// Type to project
	Projected *MediaView
	// View to render
	View string
}

// MediaListView is a type that runs validations on a projected type.
type MediaListView struct {
	// Data
	Data MediaCollectionView
	// Pagination information
	PageInfo *PageInfoView
}

// MediaCollectionView is a type that runs validations on a projected type.
type MediaCollectionView []*MediaView

// MediaView is a type that runs validations on a projected type.
type MediaView struct {
	// Key ID
	ID        *int
	MediaType *MediaTypeView
	URL       *string
}

// MediaTypeView is a type that runs validations on a projected type.
type MediaTypeView string

// PageInfoView is a type that runs validations on a projected type.
type PageInfoView struct {
	// The starting cursor for pagination
	StartCursor *int
	// The ending cursor for pagination
	EndCursor *int
	// Indicates if there are more results available
	HasMore *bool
	// Total number of resources available
	TotalResource *int
}

var (
	// MediaListMap is a map indexing the attribute names of MediaList by view name.
	MediaListMap = map[string][]string{
		"default": {
			"data",
			"pageInfo",
		},
	}
	// MediaMap is a map indexing the attribute names of Media by view name.
	MediaMap = map[string][]string{
		"default": {
			"id",
			"mediaType",
			"url",
		},
	}
	// MediaCollectionMap is a map indexing the attribute names of MediaCollection
	// by view name.
	MediaCollectionMap = map[string][]string{
		"default": {
			"id",
			"mediaType",
			"url",
		},
	}
	// PageInfoMap is a map indexing the attribute names of PageInfo by view name.
	PageInfoMap = map[string][]string{
		"default": {
			"startCursor",
			"endCursor",
			"hasMore",
			"totalResource",
		},
	}
)

// ValidateMediaList runs the validations defined on the viewed result type
// MediaList.
func ValidateMediaList(result *MediaList) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMediaListView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateMedia runs the validations defined on the viewed result type Media.
func ValidateMedia(result *Media) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMediaView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateMediaListView runs the validations defined on MediaListView using
// the "default" view.
func ValidateMediaListView(result *MediaListView) (err error) {

	if result.Data != nil {
		if err2 := ValidateMediaCollectionView(result.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.PageInfo != nil {
		if err2 := ValidatePageInfoView(result.PageInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMediaCollectionView runs the validations defined on
// MediaCollectionView using the "default" view.
func ValidateMediaCollectionView(result MediaCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateMediaView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMediaView runs the validations defined on MediaView using the
// "default" view.
func ValidateMediaView(result *MediaView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.MediaType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mediaType", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	if result.MediaType != nil {
		if !(string(*result.MediaType) == "IMAGE" || string(*result.MediaType) == "VIDEO" || string(*result.MediaType) == "UNKNWON") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.mediaType", string(*result.MediaType), []any{"IMAGE", "VIDEO", "UNKNWON"}))
		}
	}
	return
}

// ValidateMediaTypeView runs the validations defined on MediaTypeView.
func ValidateMediaTypeView(result MediaTypeView) (err error) {
	if !(string(result) == "IMAGE" || string(result) == "VIDEO" || string(result) == "UNKNWON") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("result", string(result), []any{"IMAGE", "VIDEO", "UNKNWON"}))
	}
	return
}

// ValidatePageInfoView runs the validations defined on PageInfoView using the
// "default" view.
func ValidatePageInfoView(result *PageInfoView) (err error) {
	if result.StartCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startCursor", "result"))
	}
	if result.EndCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endCursor", "result"))
	}
	if result.HasMore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hasMore", "result"))
	}
	if result.TotalResource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalResource", "result"))
	}
	return
}
