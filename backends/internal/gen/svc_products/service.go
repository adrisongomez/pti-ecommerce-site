// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-products service
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package svcproducts

import (
	"context"

	svcproductsviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_products/views"
	goa "goa.design/goa/v3/pkg"
)

// The product service perform CRUD operation over the product resource
type Service interface {
	// List products
	ListProduct(context.Context, *ListProductPayload) (res *ProductsList, err error)
	// Get a product by its id
	GetProductByID(context.Context, *GetProductByIDPayload) (res *Product, err error)
	// Create a new product
	CreateProduct(context.Context, *ProductInput) (res *Product, err error)
	// Create a new product
	UpdateProductByID(context.Context, *UpdateProductByIDPayload) (res *Product, err error)
	// Create a new product
	DeleteProductByID(context.Context, *DeleteProductByIDPayload) (res bool, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "ecommerce"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "svc-products"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"listProduct", "getProductById", "createProduct", "updateProductById", "deleteProductById"}

// DeleteProductByIDPayload is the payload type of the svc-products service
// deleteProductById method.
type DeleteProductByIDPayload struct {
	// Unique product identifier
	ProductID int
}

// GetProductByIDPayload is the payload type of the svc-products service
// getProductById method.
type GetProductByIDPayload struct {
	// Unique product identifier
	ProductID int
}

// ListProductPayload is the payload type of the svc-products service
// listProduct method.
type ListProductPayload struct {
	// Record per page
	PageSize int
	// Start listing after this resource
	After *int
}

// Pagination information
type PageInfo struct {
	// The starting cursor for pagination
	StartCursor int
	// The ending cursor for pagination
	EndCursor int
	// Indicates if there are more results available
	HasMore int
	// Total number of resources available
	TotalResource int
}

// Product is the result type of the svc-products service getProductById method.
type Product struct {
	// Key ID
	ID int
	// Title
	Title string
	// Product description
	Description string
	// Handle
	Handle string
	Vendor *Vendor
	// Product tags
	Tags []string
	// The product's status on ecommerce site
	Status   ProductStatus
	Variants []*ProductVariant
	Medias   []*ProductMedia
}

type ProductCollection []*Product

// ProductInput is the payload type of the svc-products service createProduct
// method.
type ProductInput struct {
	// Title's product
	Title string
	// Product description
	Description string
	// Last part of the url which use to idepntify the user
	Handle *string
	// Product's status
	Status *ProductStatus
	// Product tags
	Tags []string
	// Vendor's product
	VendorID string
	// Product variants
	Variants []*ProductVariantInput
	Medias   []*ProductMediaInput
}

type ProductMedia struct {
	// Key ID
	ID *int
	// URL to the media
	URL       *string
	MediaType *string
}

type ProductMediaInput struct {
	// ID of the media record where the resource has being upload
	MediaID string
	// Position on the images of the product
	SortNumber int
	// Alt text that would show in case the image does not render
	Alt *string
}

// Define the status of product on the site
type ProductStatus string

// Definition of product variants
type ProductVariant struct {
	// Key ID
	ID *int
	// Color variant option
	ColorName *string
	// Color in HEX value that would be used on the variant picker
	ColorHex *string
	// Price on cents
	Price *int
	// Product where the variant belongs to
	ProductID *string
	// ProductMedia which would be focus when a variant is picked by the user
	FeatureMediaID *string
}

type ProductVariantInput struct {
	// Color variant option
	ColorName string
	// Color in HEX value that would be used on the variant picker
	ColorHex *string
	// Price on cents
	Price int
}

// ProductsList is the result type of the svc-products service listProduct
// method.
type ProductsList struct {
	// Data
	Data ProductCollection
	// Pagination information
	PageInfo *PageInfo
}

// UpdateProductByIDPayload is the payload type of the svc-products service
// updateProductById method.
type UpdateProductByIDPayload struct {
	// Unique product identifier
	ProductID int
	Payload   *ProductInput
}

type Vendor struct {
	// Key ID
	ID   *int
	Name string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "Conflict", false, false, false)
}

// NewProductsList initializes result type ProductsList from viewed result type
// ProductsList.
func NewProductsList(vres *svcproductsviews.ProductsList) *ProductsList {
	return newProductsList(vres.Projected)
}

// NewViewedProductsList initializes viewed result type ProductsList from
// result type ProductsList using the given view.
func NewViewedProductsList(res *ProductsList, view string) *svcproductsviews.ProductsList {
	p := newProductsListView(res)
	return &svcproductsviews.ProductsList{Projected: p, View: "default"}
}

// NewProduct initializes result type Product from viewed result type Product.
func NewProduct(vres *svcproductsviews.Product) *Product {
	return newProduct(vres.Projected)
}

// NewViewedProduct initializes viewed result type Product from result type
// Product using the given view.
func NewViewedProduct(res *Product, view string) *svcproductsviews.Product {
	p := newProductView(res)
	return &svcproductsviews.Product{Projected: p, View: "default"}
}

// newProductsList converts projected type ProductsList to service type
// ProductsList.
func newProductsList(vres *svcproductsviews.ProductsListView) *ProductsList {
	res := &ProductsList{}
	if vres.Data != nil {
		res.Data = newProductCollection(vres.Data)
	}
	if vres.PageInfo != nil {
		res.PageInfo = newPageInfo(vres.PageInfo)
	}
	return res
}

// newProductsListView projects result type ProductsList to projected type
// ProductsListView using the "default" view.
func newProductsListView(res *ProductsList) *svcproductsviews.ProductsListView {
	vres := &svcproductsviews.ProductsListView{}
	if res.Data != nil {
		vres.Data = newProductCollectionView(res.Data)
	}
	if res.PageInfo != nil {
		vres.PageInfo = newPageInfoView(res.PageInfo)
	}
	return vres
}

// newProductCollection converts projected type ProductCollection to service
// type ProductCollection.
func newProductCollection(vres svcproductsviews.ProductCollectionView) ProductCollection {
	res := make(ProductCollection, len(vres))
	for i, n := range vres {
		res[i] = newProduct(n)
	}
	return res
}

// newProductCollectionView projects result type ProductCollection to projected
// type ProductCollectionView using the "default" view.
func newProductCollectionView(res ProductCollection) svcproductsviews.ProductCollectionView {
	vres := make(svcproductsviews.ProductCollectionView, len(res))
	for i, n := range res {
		vres[i] = newProductView(n)
	}
	return vres
}

// newProduct converts projected type Product to service type Product.
func newProduct(vres *svcproductsviews.ProductView) *Product {
	res := &Product{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	if vres.Handle != nil {
		res.Handle = *vres.Handle
	}
	if vres.Status != nil {
		res.Status = ProductStatus(*vres.Status)
	}
	if vres.Tags != nil {
		res.Tags = make([]string, len(vres.Tags))
		for i, val := range vres.Tags {
			res.Tags[i] = val
		}
	}
	if vres.Status == nil {
		res.Status = "DRAFT"
	}
	if vres.Variants != nil {
		res.Variants = make([]*ProductVariant, len(vres.Variants))
		for i, val := range vres.Variants {
			res.Variants[i] = transformSvcproductsviewsProductVariantViewToProductVariant(val)
		}
	}
	if vres.Medias != nil {
		res.Medias = make([]*ProductMedia, len(vres.Medias))
		for i, val := range vres.Medias {
			res.Medias[i] = transformSvcproductsviewsProductMediaViewToProductMedia(val)
		}
	}
	if vres.Vendor != nil {
		res.Vendor = newVendor(vres.Vendor)
	}
	return res
}

// newProductView projects result type Product to projected type ProductView
// using the "default" view.
func newProductView(res *Product) *svcproductsviews.ProductView {
	vres := &svcproductsviews.ProductView{
		ID:          &res.ID,
		Title:       &res.Title,
		Description: &res.Description,
		Handle:      &res.Handle,
	}
	status := svcproductsviews.ProductStatusView(res.Status)
	vres.Status = &status
	if res.Tags != nil {
		vres.Tags = make([]string, len(res.Tags))
		for i, val := range res.Tags {
			vres.Tags[i] = val
		}
	}
	if res.Variants != nil {
		vres.Variants = make([]*svcproductsviews.ProductVariantView, len(res.Variants))
		for i, val := range res.Variants {
			vres.Variants[i] = transformProductVariantToSvcproductsviewsProductVariantView(val)
		}
	}
	if res.Medias != nil {
		vres.Medias = make([]*svcproductsviews.ProductMediaView, len(res.Medias))
		for i, val := range res.Medias {
			vres.Medias[i] = transformProductMediaToSvcproductsviewsProductMediaView(val)
		}
	}
	if res.Vendor != nil {
		vres.Vendor = newVendorView(res.Vendor)
	}
	return vres
}

// newVendor converts projected type Vendor to service type Vendor.
func newVendor(vres *svcproductsviews.VendorView) *Vendor {
	res := &Vendor{
		ID: vres.ID,
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newVendorView projects result type Vendor to projected type VendorView using
// the "default" view.
func newVendorView(res *Vendor) *svcproductsviews.VendorView {
	vres := &svcproductsviews.VendorView{
		ID:   res.ID,
		Name: &res.Name,
	}
	return vres
}

// newProductVariant converts projected type ProductVariant to service type
// ProductVariant.
func newProductVariant(vres *svcproductsviews.ProductVariantView) *ProductVariant {
	res := &ProductVariant{
		ID:             vres.ID,
		ColorName:      vres.ColorName,
		ColorHex:       vres.ColorHex,
		Price:          vres.Price,
		ProductID:      vres.ProductID,
		FeatureMediaID: vres.FeatureMediaID,
	}
	return res
}

// newProductVariantView projects result type ProductVariant to projected type
// ProductVariantView using the "default" view.
func newProductVariantView(res *ProductVariant) *svcproductsviews.ProductVariantView {
	vres := &svcproductsviews.ProductVariantView{
		ID:             res.ID,
		ColorName:      res.ColorName,
		ColorHex:       res.ColorHex,
		Price:          res.Price,
		ProductID:      res.ProductID,
		FeatureMediaID: res.FeatureMediaID,
	}
	return vres
}

// newProductMedia converts projected type ProductMedia to service type
// ProductMedia.
func newProductMedia(vres *svcproductsviews.ProductMediaView) *ProductMedia {
	res := &ProductMedia{
		ID:        vres.ID,
		URL:       vres.URL,
		MediaType: vres.MediaType,
	}
	return res
}

// newProductMediaView projects result type ProductMedia to projected type
// ProductMediaView using the "default" view.
func newProductMediaView(res *ProductMedia) *svcproductsviews.ProductMediaView {
	vres := &svcproductsviews.ProductMediaView{
		ID:        res.ID,
		URL:       res.URL,
		MediaType: res.MediaType,
	}
	return vres
}

// newPageInfo converts projected type PageInfo to service type PageInfo.
func newPageInfo(vres *svcproductsviews.PageInfoView) *PageInfo {
	res := &PageInfo{}
	if vres.StartCursor != nil {
		res.StartCursor = *vres.StartCursor
	}
	if vres.EndCursor != nil {
		res.EndCursor = *vres.EndCursor
	}
	if vres.HasMore != nil {
		res.HasMore = *vres.HasMore
	}
	if vres.TotalResource != nil {
		res.TotalResource = *vres.TotalResource
	}
	return res
}

// newPageInfoView projects result type PageInfo to projected type PageInfoView
// using the "default" view.
func newPageInfoView(res *PageInfo) *svcproductsviews.PageInfoView {
	vres := &svcproductsviews.PageInfoView{
		StartCursor:   &res.StartCursor,
		EndCursor:     &res.EndCursor,
		HasMore:       &res.HasMore,
		TotalResource: &res.TotalResource,
	}
	return vres
}

// transformSvcproductsviewsProductVariantViewToProductVariant builds a value
// of type *ProductVariant from a value of type
// *svcproductsviews.ProductVariantView.
func transformSvcproductsviewsProductVariantViewToProductVariant(v *svcproductsviews.ProductVariantView) *ProductVariant {
	if v == nil {
		return nil
	}
	res := &ProductVariant{
		ID:             v.ID,
		ColorName:      v.ColorName,
		ColorHex:       v.ColorHex,
		Price:          v.Price,
		ProductID:      v.ProductID,
		FeatureMediaID: v.FeatureMediaID,
	}

	return res
}

// transformSvcproductsviewsProductMediaViewToProductMedia builds a value of
// type *ProductMedia from a value of type *svcproductsviews.ProductMediaView.
func transformSvcproductsviewsProductMediaViewToProductMedia(v *svcproductsviews.ProductMediaView) *ProductMedia {
	if v == nil {
		return nil
	}
	res := &ProductMedia{
		ID:        v.ID,
		URL:       v.URL,
		MediaType: v.MediaType,
	}

	return res
}

// transformProductVariantToSvcproductsviewsProductVariantView builds a value
// of type *svcproductsviews.ProductVariantView from a value of type
// *ProductVariant.
func transformProductVariantToSvcproductsviewsProductVariantView(v *ProductVariant) *svcproductsviews.ProductVariantView {
	if v == nil {
		return nil
	}
	res := &svcproductsviews.ProductVariantView{
		ID:             v.ID,
		ColorName:      v.ColorName,
		ColorHex:       v.ColorHex,
		Price:          v.Price,
		ProductID:      v.ProductID,
		FeatureMediaID: v.FeatureMediaID,
	}

	return res
}

// transformProductMediaToSvcproductsviewsProductMediaView builds a value of
// type *svcproductsviews.ProductMediaView from a value of type *ProductMedia.
func transformProductMediaToSvcproductsviewsProductMediaView(v *ProductMedia) *svcproductsviews.ProductMediaView {
	if v == nil {
		return nil
	}
	res := &svcproductsviews.ProductMediaView{
		ID:        v.ID,
		URL:       v.URL,
		MediaType: v.MediaType,
	}

	return res
}
