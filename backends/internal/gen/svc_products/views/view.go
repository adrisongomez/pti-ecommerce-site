// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-products views
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ProductsList is the viewed result type that is projected based on a view.
type ProductsList struct {
	// Type to project
	Projected *ProductsListView
	// View to render
	View string
}

// Product is the viewed result type that is projected based on a view.
type Product struct {
	// Type to project
	Projected *ProductView
	// View to render
	View string
}

// ProductsListView is a type that runs validations on a projected type.
type ProductsListView struct {
	// Data
	Data ProductCollectionView
	// Pagination information
	PageInfo *PageInfoView
}

// ProductCollectionView is a type that runs validations on a projected type.
type ProductCollectionView []*ProductView

// ProductView is a type that runs validations on a projected type.
type ProductView struct {
	// Key ID
	ID *int
	// Title
	Title *string
	// Product description
	Description *string
	// Handle
	Handle *string
	Vendor *VendorView
	// Product tags
	Tags []string
	// The product's status on ecommerce site
	Status   *ProductStatusView
	Variants []*ProductVariantView
	Medias   []*ProductMediaView
}

// VendorView is a type that runs validations on a projected type.
type VendorView struct {
	// Key ID
	ID   *int
	Name *string
}

// ProductStatusView is a type that runs validations on a projected type.
type ProductStatusView string

// ProductVariantView is a type that runs validations on a projected type.
type ProductVariantView struct {
	// Key ID
	ID *int
	// Color variant option
	ColorName *string
	// Color in HEX value that would be used on the variant picker
	ColorHex *string
	// Price on cents
	Price *int
	// Product where the variant belongs to
	ProductID *string
	// ProductMedia which would be focus when a variant is picked by the user
	FeatureMediaID *string
}

// ProductMediaView is a type that runs validations on a projected type.
type ProductMediaView struct {
	// Key ID
	ID *int
	// URL to the media
	URL       *string
	MediaType *string
}

// PageInfoView is a type that runs validations on a projected type.
type PageInfoView struct {
	// The starting cursor for pagination
	StartCursor *int
	// The ending cursor for pagination
	EndCursor *int
	// Indicates if there are more results available
	HasMore *bool
	// Total number of resources available
	TotalResource *int
}

var (
	// ProductsListMap is a map indexing the attribute names of ProductsList by
	// view name.
	ProductsListMap = map[string][]string{
		"default": {
			"data",
			"pageInfo",
		},
	}
	// ProductMap is a map indexing the attribute names of Product by view name.
	ProductMap = map[string][]string{
		"default": {
			"id",
			"title",
			"description",
			"handle",
			"vendor",
			"tags",
			"status",
			"variants",
			"medias",
		},
	}
	// ProductCollectionMap is a map indexing the attribute names of
	// ProductCollection by view name.
	ProductCollectionMap = map[string][]string{
		"default": {
			"id",
			"title",
			"description",
			"handle",
			"vendor",
			"tags",
			"status",
			"variants",
			"medias",
		},
	}
	// VendorMap is a map indexing the attribute names of Vendor by view name.
	VendorMap = map[string][]string{
		"default": {
			"id",
			"name",
		},
	}
	// ProductVariantMap is a map indexing the attribute names of ProductVariant by
	// view name.
	ProductVariantMap = map[string][]string{
		"default": {
			"id",
			"colorName",
			"colorHex",
			"price",
			"productId",
			"featureMediaId",
		},
	}
	// ProductMediaMap is a map indexing the attribute names of ProductMedia by
	// view name.
	ProductMediaMap = map[string][]string{
		"default": {
			"id",
			"url",
			"mediaType",
		},
	}
	// PageInfoMap is a map indexing the attribute names of PageInfo by view name.
	PageInfoMap = map[string][]string{
		"default": {
			"startCursor",
			"endCursor",
			"hasMore",
			"totalResource",
		},
	}
)

// ValidateProductsList runs the validations defined on the viewed result type
// ProductsList.
func ValidateProductsList(result *ProductsList) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateProductsListView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateProduct runs the validations defined on the viewed result type
// Product.
func ValidateProduct(result *Product) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateProductView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateProductsListView runs the validations defined on ProductsListView
// using the "default" view.
func ValidateProductsListView(result *ProductsListView) (err error) {

	if result.Data != nil {
		if err2 := ValidateProductCollectionView(result.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.PageInfo != nil {
		if err2 := ValidatePageInfoView(result.PageInfo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProductCollectionView runs the validations defined on
// ProductCollectionView using the "default" view.
func ValidateProductCollectionView(result ProductCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateProductView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProductView runs the validations defined on ProductView using the
// "default" view.
func ValidateProductView(result *ProductView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Handle == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("handle", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	if result.Status != nil {
		if !(string(*result.Status) == "ACTIVE" || string(*result.Status) == "DRAFT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", string(*result.Status), []any{"ACTIVE", "DRAFT"}))
		}
	}
	for _, e := range result.Variants {
		if e != nil {
			if err2 := ValidateProductVariantView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range result.Medias {
		if e != nil {
			if err2 := ValidateProductMediaView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Vendor != nil {
		if err2 := ValidateVendorView(result.Vendor); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateVendorView runs the validations defined on VendorView using the
// "default" view.
func ValidateVendorView(result *VendorView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	return
}

// ValidateProductStatusView runs the validations defined on ProductStatusView.
func ValidateProductStatusView(result ProductStatusView) (err error) {
	if !(string(result) == "ACTIVE" || string(result) == "DRAFT") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("result", string(result), []any{"ACTIVE", "DRAFT"}))
	}
	return
}

// ValidateProductVariantView runs the validations defined on
// ProductVariantView using the "default" view.
func ValidateProductVariantView(result *ProductVariantView) (err error) {
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	return
}

// ValidateProductMediaView runs the validations defined on ProductMediaView
// using the "default" view.
func ValidateProductMediaView(result *ProductMediaView) (err error) {
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	return
}

// ValidatePageInfoView runs the validations defined on PageInfoView using the
// "default" view.
func ValidatePageInfoView(result *PageInfoView) (err error) {
	if result.StartCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startCursor", "result"))
	}
	if result.EndCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endCursor", "result"))
	}
	if result.HasMore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hasMore", "result"))
	}
	if result.TotalResource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalResource", "result"))
	}
	return
}
