// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-vendor endpoints
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package svcvendor

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "svc-vendor" service endpoints.
type Endpoints struct {
	List       goa.Endpoint
	Create     goa.Endpoint
	DeleteByID goa.Endpoint
}

// NewEndpoints wraps the methods of the "svc-vendor" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		List:       NewListEndpoint(s),
		Create:     NewCreateEndpoint(s),
		DeleteByID: NewDeleteByIDEndpoint(s),
	}
}

// Use applies the given middleware to all the "svc-vendor" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Create = m(e.Create)
	e.DeleteByID = m(e.DeleteByID)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "svc-vendor".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListPayload)
		res, err := s.List(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedVendorList(res, "default")
		return vres, nil
	}
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "svc-vendor".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*VendorInput)
		res, err := s.Create(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedVendor(res, "default")
		return vres, nil
	}
}

// NewDeleteByIDEndpoint returns an endpoint function that calls the method
// "deleteById" of service "svc-vendor".
func NewDeleteByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteByIDPayload)
		return s.DeleteByID(ctx, p)
	}
}
