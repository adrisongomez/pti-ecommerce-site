/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as CheckoutIndexImport } from './routes/checkout/index'
import { Route as CartsIndexImport } from './routes/carts/index'
import { Route as ProductsProductIdImport } from './routes/products.$productId'
import { Route as AuthSignUpImport } from './routes/auth/sign-up'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as UsersOrdersIndexImport } from './routes/users/orders/index'
import { Route as UsersOrdersOrderIdIndexImport } from './routes/users/orders/$orderId/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const CheckoutIndexRoute = CheckoutIndexImport.update({
  id: '/checkout/',
  path: '/checkout/',
  getParentRoute: () => rootRoute,
} as any)

const CartsIndexRoute = CartsIndexImport.update({
  id: '/carts/',
  path: '/carts/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsProductIdRoute = ProductsProductIdImport.update({
  id: '/products/$productId',
  path: '/products/$productId',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const UsersOrdersIndexRoute = UsersOrdersIndexImport.update({
  id: '/users/orders/',
  path: '/users/orders/',
  getParentRoute: () => rootRoute,
} as any)

const UsersOrdersOrderIdIndexRoute = UsersOrdersOrderIdIndexImport.update({
  id: '/users/orders/$orderId/',
  path: '/users/orders/$orderId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof rootRoute
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdImport
      parentRoute: typeof rootRoute
    }
    '/carts/': {
      id: '/carts/'
      path: '/carts'
      fullPath: '/carts'
      preLoaderRoute: typeof CartsIndexImport
      parentRoute: typeof rootRoute
    }
    '/checkout/': {
      id: '/checkout/'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/orders/': {
      id: '/users/orders/'
      path: '/users/orders'
      fullPath: '/users/orders'
      preLoaderRoute: typeof UsersOrdersIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/orders/$orderId/': {
      id: '/users/orders/$orderId/'
      path: '/users/orders/$orderId'
      fullPath: '/users/orders/$orderId'
      preLoaderRoute: typeof UsersOrdersOrderIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/carts': typeof CartsIndexRoute
  '/checkout': typeof CheckoutIndexRoute
  '/users': typeof UsersIndexRoute
  '/users/orders': typeof UsersOrdersIndexRoute
  '/users/orders/$orderId': typeof UsersOrdersOrderIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/carts': typeof CartsIndexRoute
  '/checkout': typeof CheckoutIndexRoute
  '/users': typeof UsersIndexRoute
  '/users/orders': typeof UsersOrdersIndexRoute
  '/users/orders/$orderId': typeof UsersOrdersOrderIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/products/$productId': typeof ProductsProductIdRoute
  '/carts/': typeof CartsIndexRoute
  '/checkout/': typeof CheckoutIndexRoute
  '/users/': typeof UsersIndexRoute
  '/users/orders/': typeof UsersOrdersIndexRoute
  '/users/orders/$orderId/': typeof UsersOrdersOrderIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/sign-up'
    | '/products/$productId'
    | '/carts'
    | '/checkout'
    | '/users'
    | '/users/orders'
    | '/users/orders/$orderId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/sign-up'
    | '/products/$productId'
    | '/carts'
    | '/checkout'
    | '/users'
    | '/users/orders'
    | '/users/orders/$orderId'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/sign-up'
    | '/products/$productId'
    | '/carts/'
    | '/checkout/'
    | '/users/'
    | '/users/orders/'
    | '/users/orders/$orderId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  ProductsProductIdRoute: typeof ProductsProductIdRoute
  CartsIndexRoute: typeof CartsIndexRoute
  CheckoutIndexRoute: typeof CheckoutIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  UsersOrdersIndexRoute: typeof UsersOrdersIndexRoute
  UsersOrdersOrderIdIndexRoute: typeof UsersOrdersOrderIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  ProductsProductIdRoute: ProductsProductIdRoute,
  CartsIndexRoute: CartsIndexRoute,
  CheckoutIndexRoute: CheckoutIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  UsersOrdersIndexRoute: UsersOrdersIndexRoute,
  UsersOrdersOrderIdIndexRoute: UsersOrdersOrderIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/auth/sign-up",
        "/products/$productId",
        "/carts/",
        "/checkout/",
        "/users/",
        "/users/orders/",
        "/users/orders/$orderId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/sign-up": {
      "filePath": "auth/sign-up.tsx"
    },
    "/products/$productId": {
      "filePath": "products.$productId.tsx"
    },
    "/carts/": {
      "filePath": "carts/index.tsx"
    },
    "/checkout/": {
      "filePath": "checkout/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    },
    "/users/orders/": {
      "filePath": "users/orders/index.tsx"
    },
    "/users/orders/$orderId/": {
      "filePath": "users/orders/$orderId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
